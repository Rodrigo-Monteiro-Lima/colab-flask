# -*- coding: utf-8 -*-
"""ApiFlask

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dyuQ5fyybx9x1LMyhblS_LKS3ZVR7d75
"""

!pip install django

from google.colab.output import eval_js
print(eval_js("google.colab.kernel.proxyPort(8000)"))

ALLOWED_HOSTS = ['colab.reserch.google.com']

!python manage.py runserver 8000

!pip install fastapi nest-asyncio pyngrok uvicorn

from flask import *
from flask_ngrok import run_with_ngrok
app = Flask(__name__)
@app.route('/index')
def home():
  return 'Hello World'

run_with_ngrok(app)
app.run()

from fastapi import FastAPI
import nest_asyncio
from pyngrok import ngrok
import uvicorn

app = FastAPI()

@app.get('/index')
async def home():
  return "Hello World"

ngrok_tunnel = ngrok.connect(8000)
print('Public URL:', ngrok_tunnel.public_url)
nest_asyncio.apply()
uvicorn.run(app, port=8000)

!pip install flask_ngrok

import pandas as pd
from flask_ngrok import run_with_ngrok
from flask import request, jsonify, Flask
import random as rk

app = Flask("user")
run_with_ngrok(app)

d = [{
    "name": "Mahesh", 
    "age": 25, 
    "city": "Bangalore",
    "Country": "India",
      },
     {
    "name": "Alex", 
    "age": 26, 
    "city": "London",
    "Country": "UK",
      },
     {
    "name": "David", 
    "age": 27, 
    "city": "San Francisco",
    "Country": "USA",
      },
     {
    "name": "John", 
    "age": 28, 
    "city": "Toronto",
    "Country": "Canada",
      },
     {
    "name": "Chris", 
    "age": 29, 
    "city": "Paris",
    "Country": "France",
      },
     ]

@app.route("/")

def home():
  '''
  The entire line below must be written in a single line.
  '''
  return "<marquee><h3> TO CHECK IN PUT ADD '/input' TO THE URL AND TO CHECK OUT PUT ADD '/output' TO THE URL.</h3></marquee>"

@app.route("/input") #code to assign Input URL in our app to function input.

def input():
  return jsonify(d) # "d" is the dictionary we defined

@app.route('/output', methods=['GET','POST']) #output page

def predJson():
 pred = r.choice(["positive","negative"])
 nd = d # our input
 nd["prediction"]=pred
 return jsonify(nd)

app.run()